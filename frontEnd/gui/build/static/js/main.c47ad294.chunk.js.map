{"version":3,"sources":["serviceWorker.js","components/AddEditUser.js","components/ShowUsers.js","index.js"],"names":["Boolean","window","location","hostname","match","AddEditUser","react_default","a","createElement","className","action","method","type","name","id","Component","ShowUsers","state","users","_this2","this","axios","get","then","res","setState","console","dir","log","border","Link","to","value","ReactDOM","render","BrowserRouter","Route","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,oHCASC,mLAbP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACfH,EAAAC,EAAAC,cAAA,QAAME,OAAO,GAAGC,OAAO,QAAvB,aACgBL,EAAAC,EAAAC,cAAA,SAAOI,KAAO,OAAOC,KAAM,MAAMC,GAAI,QAAQR,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WADlE,aAEgBF,EAAAC,EAAAC,cAAA,SAAOI,KAAO,OAAOC,KAAM,WAAWC,GAAI,aAAaR,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WAF5E,aAGgBF,EAAAC,EAAAC,cAAA,SAAOI,KAAO,OAAOC,KAAM,WAAWC,GAAI,aAAaR,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WACtEF,EAAAC,EAAAC,cAAA,UAAQI,KAAK,UAAb,mBARUG,sCC0CXC,6MAvCbC,MAAQ,CACNC,MAAO,uFAGW,IAAAC,EAAAC,KAClBC,IAAMC,IAAN,8BACGC,KAAK,SAAAC,GACJ,IAAMN,EAAQM,EACdL,EAAKM,SAAS,CAAEP,UAChBQ,QAAQC,IAAIR,EAAKF,OACjBS,QAAQE,IAAIT,EAAKF,0CAKrB,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eACjBH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOM,GAAG,YAAYe,OAAO,KAC1BvB,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,uBAGXF,EAAAC,EAAAC,cAAA,eAGQF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WACbF,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAMC,GAAG,KAAIzB,EAAAC,EAAAC,cAAA,SAAOI,KAAK,SAASoB,MAAM,wBAjCzBjB,aCIxBkB,IAASC,OACL5B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,KACI7B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWlC,IACjCC,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,OAAOC,UAAWlC,IACpCC,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOE,KAAK,aAAaC,UAAWvB,MAG1CwB,SAASC,eAAe,SHiHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.c47ad294.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\n\r\n\r\nclass AddEditUser extends Component {\r\n    render() {\r\n        return (\r\n          <div className=\"user-add-edit\">\r\n          <form action=\"\" method=\"POST\">\r\n                User ID:  <input type = \"text\" name= \"uid\" id= \"uid\" /><br/><br/>\r\n                UserName: <input type = \"text\" name= \"username\" id= \"username\" /><br/><br/>\r\n                Password: <input type = \"text\" name= \"password\" id= \"password\" /><br/><br/>\r\n                <button type=\"submit\">Submit</button>  \r\n                </form>\r\n             </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default AddEditUser;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nclass ShowUsers extends Component {\r\n\r\n  state = {\r\n    users: []\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios.get(`http://localhost:8000/show`)\r\n      .then(res => {\r\n        const users = res;\r\n        this.setState({ users });\r\n        console.dir(this.state);\r\n        console.log(this.state);\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"user-details\">\r\n        <header className=\"user-header\">\r\n         <div>\r\n         <table id=\"showtable\" border=\"2\">  \r\n            <thead>  \r\n                <tr>  \r\n                    <th>User Name</th>  \r\n                    <th>Password</th>  \r\n                    <th>Actions</th> \r\n                </tr>  \r\n         </thead>  \r\n         <tbody>\r\n         \r\n         </tbody>\r\n         </table><br/><br/>\r\n         <Link to=\"/\"><input type=\"button\" value=\"Add User\"/></Link>\r\n         </div>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShowUsers;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport AddEditUser from './components/AddEditUser';\nimport ShowUsers from './components/ShowUsers';\n\nReactDOM.render(\n    <Router>\n        <div>\n          <Route exact path=\"/\" component={AddEditUser} />\n          <Route exact path=\"/add\" component={AddEditUser} />\n          <Route path=\"/showusers\" component={ShowUsers} />\n        </div>\n    </Router>,\n    document.getElementById('root')\n  )\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}